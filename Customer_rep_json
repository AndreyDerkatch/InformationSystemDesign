import json
from typing import List, Optional

class Customer_rep_json:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.customers = self._load_customers()

    def _load_customers(self) -> List[dict]:
        try:
            with open(self.file_path, 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            return []

    def _save_customers(self):
        with open(self.file_path, 'w', encoding='utf-8') as file:
            json.dump(self.customers, file, indent=4, ensure_ascii=False)

    def get_by_id(self, customer_id: int) -> Optional[dict]:
        for customer in self.customers:
            if customer.get('customer_id') == customer_id:
                return customer
        return None

    def get_k_n_short_list(self, k: int, n: int) -> List[dict]:
        start_index = (n - 1) * k
        end_index = start_index + k
        return self.customers[start_index:end_index]

    def sort_by_field(self, field: str):
        if not self.customers:
            return
        if field not in self.customers[0]:
            raise ValueError(f"Field '{field}' does not exist in customer data.")
        self.customers.sort(key=lambda x: x.get(field, ''))

    def add_customer(self, customer_data: dict):
        if not self.customers:
            new_id = 1
        else:
            new_id = max(customer['customer_id'] for customer in self.customers) + 1
        customer_data['customer_id'] = new_id
        self.customers.append(customer_data)
        self._save_customers()

    def update_customer(self, customer_id: int, updated_data: dict):
        for customer in self.customers:
            if customer['customer_id'] == customer_id:
                customer.update(updated_data)
                self._save_customers()
                return
        raise ValueError(f"Customer with ID {customer_id} not found.")

    def delete_customer(self, customer_id: int):
        self.customers = [customer for customer in self.customers if customer['customer_id'] != customer_id]
        self._save_customers()

    def get_count(self) -> int:
        return len(self.customers)
