class CustomerRepBase:
    def __init__(self, file_path):
        self.file_path = file_path
        self.customers = self._load_customers()

    def _load_customers(self):
        raise NotImplementedError("Этот метод должен быть реализован в дочерних классах")

    def _save_customers(self):
        raise NotImplementedError("Этот метод должен быть реализован в дочерних классах")

    def get_by_id(self, customer_id):
        for customer in self.customers:
            if customer['customer_id'] == customer_id:
                return customer
        return None

    def get_k_n_short_list(self, k, n):
        start_index = (n - 1) * k
        return self.customers[start_index:start_index + k]

    def add_customer(self, customer_data):
        if not self.customers:
            new_id = 1
        else:
            new_id = max(customer['customer_id'] for customer in self.customers) + 1
        customer_data['customer_id'] = new_id
        self.customers.append(customer_data)
        self._save_customers()

    def update_customer(self, customer_id, updated_data):
        for customer in self.customers:
            if customer['customer_id'] == customer_id:
                customer.update(updated_data)
                self._save_customers()
                return
        raise ValueError(f"Customer with ID {customer_id} not found.")

    def delete_customer(self, customer_id):
        self.customers = [customer for customer in self.customers if customer['customer_id'] != customer_id]
        self._save_customers()

    def get_count(self):
        return len(self.customers)
